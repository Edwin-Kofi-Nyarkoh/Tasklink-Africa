// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  phone         String?
  address       String?
  city          String?
  state         String?
  country       String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  workerProfile WorkerProfile?
  bookings      Booking[]
  reviews       Review[]
  sentMessages  Message[]     @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  tickets       Ticket[]

  @@map("users")
}

model WorkerProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  title           String
  description     String   @db.Text
  experience      Int      // years of experience
  hourlyRate      Float
  availability    Boolean  @default(true)
  isVerified      Boolean  @default(false)
  rating          Float    @default(0)
  totalReviews    Int      @default(0)
  completedJobs   Int      @default(0)
  responseTime    String?  // e.g., "Within 1 hour"
  languages       String[] // JSON array of languages
  certifications  String[] // JSON array of certifications
  portfolio       String[] // JSON array of image URLs
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  services     WorkerService[]
  bookings     Booking[]
  reviews      Review[]
  workSamples  WorkSample[]

  @@map("worker_profiles")
}

model Service {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workerServices WorkerService[]
  bookings       Booking[]

  @@map("services")
}

model WorkerService {
  id              String @id @default(cuid())
  workerId        String
  serviceId       String
  customRate      Float? // Override default hourly rate for this service
  isActive        Boolean @default(true)

  worker  WorkerProfile @relation(fields: [workerId], references: [id], onDelete: Cascade)
  service Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([workerId, serviceId])
  @@map("worker_services")
}

model WorkSample {
  id          String   @id @default(cuid())
  workerId    String
  title       String
  description String?
  imageUrl    String
  completedAt DateTime
  createdAt   DateTime @default(now())

  worker WorkerProfile @relation(fields: [workerId], references: [id], onDelete: Cascade)

  @@map("work_samples")
}

model Booking {
  id              String        @id @default(cuid())
  customerId      String
  workerId        String
  serviceId       String
  title           String
  description     String        @db.Text
  customerAddress String
  customerPhone   String
  scheduledDate   DateTime
  estimatedHours  Float
  totalAmount     Float
  status          BookingStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentReference String?
  ticketNumber    String        @unique
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  customer User          @relation(fields: [customerId], references: [id])
  worker   WorkerProfile @relation(fields: [workerId], references: [id])
  service  Service       @relation(fields: [serviceId], references: [id])
  review   Review?
  messages Message[]
  tickets  Ticket[]

  @@map("bookings")
}

model Review {
  id        String   @id @default(cuid())
  bookingId String   @unique
  customerId String
  workerId  String
  rating    Int      // 1-5 stars
  comment   String?  @db.Text
  createdAt DateTime @default(now())

  booking  Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  customer User          @relation(fields: [customerId], references: [id])
  worker   WorkerProfile @relation(fields: [workerId], references: [id])

  @@map("reviews")
}

model Message {
  id         String      @id @default(cuid())
  bookingId  String
  senderId   String
  receiverId String
  content    String      @db.Text
  messageType MessageType @default(TEXT)
  isRead     Boolean     @default(false)
  createdAt  DateTime    @default(now())

  booking  Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  sender   User    @relation("SentMessages", fields: [senderId], references: [id])
  receiver User    @relation("ReceivedMessages", fields: [receiverId], references: [id])

  @@map("messages")
}

model Ticket {
  id           String       @id @default(cuid())
  bookingId    String
  userId       String
  ticketNumber String       @unique
  qrCode       String       // Base64 encoded QR code
  status       TicketStatus @default(ACTIVE)
  expiresAt    DateTime
  createdAt    DateTime     @default(now())

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@map("tickets")
}

model Blog {
  id          String   @id @default(cuid())
  title       String
  excerpt     String
  content     String
  image       String
  category    String
  author      String
  publishedAt DateTime @default(now())
  readTime    String

  @@map("blogs")
}

model HelpArticle {
  id        String   @id @default(cuid())
  title     String
  content   String
  popular   Boolean
  purpose   ArticlePurposes  @default(STARTERS)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum ArticlePurposes {
  STARTERS
  CUSTOMERS
  PROFESSIONALS
  PAYMENTS
}

enum UserRole {
  CUSTOMER
  WORKER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}

enum TicketStatus {
  ACTIVE
  USED
  EXPIRED
}
